package com.t248.lmf.crm.controller;

import com.t248.lmf.crm.entity.*;
import com.t248.lmf.crm.repository.DictRepostitor;
import com.t248.lmf.crm.service.ChanceService;
import com.t248.lmf.crm.service.IUserService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Controller
public class ExploitController {

    @Resource
    private ChanceService chanceService;
    @Resource
    private DictRepostitor dictRepostitor;
    @Resource
    private IUserService userService;


    @RequestMapping(value = "/exploit/list")
    public String list(@RequestParam(required = false) String chcCustName,
                       @RequestParam(required = false) String chcLinkman,
                       @RequestParam(required = false) String chcTitle, Model model,
                       @RequestParam(required = false, defaultValue = "1") int pageIndex){
        Sort sort = Sort.by(Sort.Direction.ASC,"chcId");
        Pageable pageable = PageRequest.of(pageIndex-1,5,sort);

        Page<Chance> chancePager = chanceService.findChances("未分配","noteq",chcCustName,chcTitle,chcLinkman,pageable);
        model.addAttribute("chancePager",chancePager);
        model.addAttribute("chcCustName",chcCustName);
        model.addAttribute("chcLinkman",chcLinkman);
        model.addAttribute("chcTitle",chcTitle);

        return "exploit/list";
    }

    @RequestMapping("/exploit/save")
    public String save(Plan plan, HttpSession session){
        System.out.println(plan.getPlaTodo());
        System.out.println(plan.getPlaChcId());
        System.out.println(plan.getPlaDate());
        chanceService.planSave(plan);
//        chanceService.save(chance);
//        return "forward:/exploit/list";
        return "redirect:/exploit/list";
    }

    @RequestMapping("/exploit/upd")
    public String upd(Long chcId,Model model){
        Chance chance = chanceService.getChance(chcId);
        model.addAttribute("chance",chance);
        model.addAttribute("lv",dictRepostitor.findDictsByDictValue(chance.getChcClientGrade()));

        return "exploit/upd";
    }
    @RequestMapping("/exploit/edit")
    public String edit(Long chcId,Model model){
        Chance chance = chanceService.getChance(chcId);
        model.addAttribute("chance",chance);
        model.addAttribute("lv",dictRepostitor.findDictsByDictValue(chance.getChcClientGrade()));

        return "exploit/edit";
    }
    @RequestMapping("/exploit/upd2")
    public String upd2(Long chcId,Model model){
        Chance chance = chanceService.getChance(chcId);
        model.addAttribute("chance",chance);
        model.addAttribute("lv",dictRepostitor.findDictsByDictValue(chance.getChcClientGrade()));

        return "exploit/upd2";
    }

    @RequestMapping("/plan/result")
    @ResponseBody
    public Object result(Long chcId,String tp){
        Map<String,String> map = new HashMap<String,String>();
        try{
            Chance chance = chanceService.getChance(chcId);
            if (tp.trim().equals("t")){
                System.out.println("成功");
                Customer customer = new Customer();
                customer.setCustNo("KH"+new Date().getTime());
                customer.setCustName(chance.getChcCustName());
                customer.setCustRegion(chance.getChcArea());
                User user = userService.getUser(chance.getChcDueId());
                customer.setUser(user);
                customer.setCustManagerName(user.getUsrName());
                Dict dict = dictRepostitor.findDictsByDictValue(chance.getChcClientGrade());
                customer.setCustLevel(Long.parseLong(dict.getDictValue()));
                customer.setCustLevelLabel(dict.getDictItem());
                chanceService.saveCustomer(customer);
                map.put("flag","true");
            }else if(tp.trim().equals("f")){
                System.out.println("失败");
                map.put("flag","false");
            }
            chance.setChcStatus("已归档");
            chanceService.save(chance);
            map.put("delResult","true");
        }catch(Exception e){
            e.printStackTrace();
            map.put("delResult","false");
        }
        return map;
    }

}
